@page "/fetchdata"
@inject HttpClient Http
@using IdentityModel.Client

<h1>Weather forecast (Identity Server 4)</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public List<WeatherForecast> forecasts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DiscoveryDocumentResponse discovery = await Http.GetDiscoveryDocumentAsync("https://localhost:1000");
        ClientCredentialsTokenRequest tokenRequest = new ClientCredentialsTokenRequest();

        tokenRequest.ClientId = "GarantiBankasi";
        tokenRequest.ClientSecret = "garanti";
        tokenRequest.Address = discovery.TokenEndpoint;

        TokenResponse tokenResponse = await Http.RequestClientCredentialsTokenAsync(tokenRequest);
        Http.SetBearerToken(tokenResponse.AccessToken);

        var result = await Http.GetAsync("https://localhost:2000/api/weatherforecast");
        if (result.IsSuccessStatusCode)
        {
            var model = await result.Content.ReadAsStringAsync();
            forecasts = JsonConvert.DeserializeObject<List<WeatherForecast>>(model);
        }
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
